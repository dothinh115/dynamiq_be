import { CommonService } from '../common/common.service';
import { createDataSource } from '../data-source/data-source';
import { Injectable, Logger, OnModuleInit } from '@nestjs/common';
import { DataSource, Repository } from 'typeorm';

@Injectable()
export class DataSourceService implements OnModuleInit {
  private dataSource: DataSource;
  private logger = new Logger(DataSourceService.name);

  constructor(private commonService: CommonService) {}

  async onModuleInit() {
    this.logger.log('Chu·∫©n b·ªã g√°n v√† init DataSource.');
    const entities = await this.commonService.loadDynamicEntities();
    this.dataSource = createDataSource(entities);
    await this.dataSource.initialize();
    this.logger.debug('G√°n v√† init DataSource th√†nh c√¥ng!');
  }

  async reloadDataSource() {
    if (!this.dataSource.isInitialized) {
      this.logger.debug('DataSource ch∆∞a init, b·ªè qua reload!');
      return;
    }

    this.logger.log('üîÅ Chu·∫©n b·ªã reload DataSource');
    await this.dataSource.destroy();
    this.logger.debug('‚úÖ Destroy DataSource c≈© th√†nh c√¥ng!');

    try {
      const entities = await this.commonService.loadDynamicEntities();

      this.dataSource = createDataSource(entities);
      await this.dataSource.initialize();
      this.logger.debug('‚úÖ ReInit DataSource th√†nh c√¥ng!');
    } catch (err: any) {
      this.logger.error('‚ùå L·ªói khi reInit DataSource:', err.message);
      this.logger.error(err.stack || err);
    }
  }

  getRepository<Entity>(tableName: string): Repository<Entity> {
    if (!this.dataSource.isInitialized) {
      throw new Error('DataSource ch∆∞a ƒë∆∞·ª£c kh·ªüi t·∫°o!');
    }

    const metadata = this.dataSource.entityMetadatas.find(
      (meta) => meta.tableName === tableName,
    );

    if (!metadata) {
      throw new Error(
        `Kh√¥ng t√¨m th·∫•y entity t∆∞∆°ng ·ª©ng v·ªõi b·∫£ng "${tableName}"`,
      );
    }

    return this.dataSource.getRepository<Entity>(metadata.target as any);
  }

  getDataSource() {
    return this.dataSource;
  }
}
